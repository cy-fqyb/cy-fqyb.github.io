<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2023/01/16/two/"/>
      <url>/2023/01/16/two/</url>
      
        <content type="html"><![CDATA[<div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=547298138&bvid=BV13q4y1H7ia&cid=386702201&page=1"    scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pinia</title>
      <link href="/2023/01/04/pinia/"/>
      <url>/2023/01/04/pinia/</url>
      
        <content type="html"><![CDATA[<h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h1><blockquote><p><a href="https://pinia.web3doc.top/">Pinia 中文文档</a></p><p><a href="https://www.bilibili.com/video/BV11Y411b7nb/">b 站教程</a></p></blockquote><h2 id="1-什么是-pinia"><a href="#1-什么是-pinia" class="headerlink" title="1.什么是 pinia"></a>1.什么是 pinia</h2><ul><li>最新的 Vue 状态管理库，用于替代 Vuex</li><li>特点:<ul><li>使用更加简便</li><li>更好的支持 Ts</li></ul></li></ul><h2 id="2-pinia-的安装"><a href="#2-pinia-的安装" class="headerlink" title="2.pinia 的安装"></a>2.pinia 的安装</h2><ul><li>使用包管理工具来安装 pinia</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h2 id="3-pinia-的基本使用"><a href="#3-pinia-的基本使用" class="headerlink" title="3.pinia 的基本使用"></a>3.pinia 的基本使用</h2><h3 id="3-1-创建-pinia-实例"><a href="#3-1-创建-pinia-实例" class="headerlink" title="3.1 创建 pinia 实例"></a>3.1 创建 pinia 实例</h3><ul><li>在<code>main.js</code>中引用 pinia 然后注册</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vue实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建pinia实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载pinia实例</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将vue实例挂载到页面上</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Vue2 使用 pinia</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是vue2使用pinia插件还需多安装一个插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>);</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">// 其他选项...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 注意同一个pinia实例可以在多个Vue应用中使用</span></span><br><span class="line">  pinia,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2-创建-store-文件夹"><a href="#3-2-创建-store-文件夹" class="headerlink" title="3.2 创建 store 文件夹"></a>3.2 创建 store 文件夹</h3><ul><li>在<code>src</code>文件夹下创建一个 store 文件夹用来存储 pinia 相关文件</li><li>在<code>store</code>文件夹下创建一个<code>index.js</code>用来充当 pinia 的容器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入defineStoreAPI用来创建容器</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个容器然后暴露</span></span><br><span class="line"><span class="keyword">export</span> deault <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//类似于data用来保存全局的数据</span></span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="string">&quot;25&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//类似于computed(计算属性),用来封装计算属性，有缓存的功能</span></span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">         <span class="title function_">maxNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//类似于methods,用来存储对数据的操作方法,封装业务逻辑，用来修改state</span></span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">dataChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//this.num++;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;牛马&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span>++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1122</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-在组件使用-pinia"><a href="#3-3-在组件使用-pinia" class="headerlink" title="3.3 在组件使用 pinia"></a>3.3 在组件使用 pinia</h3><ul><li>如果想要使用 pinia 需要在组件中引入 store 并且要在 setup 中声明调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入创建好的容器</span></span><br><span class="line"><span class="keyword">import</span> myStore <span class="keyword">from</span> <span class="string">&quot;../store/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数创建store实例,然后就可以通过实例对象访问到store中的属性和方法</span></span><br><span class="line"><span class="keyword">const</span> mainStore = <span class="title function_">myStore</span>();</span><br></pre></td></tr></table></figure><ul><li>模板中使用 pinia 的数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>piniaDemo中的数据&#123;&#123; mainStore.num &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>名字:&#123;&#123; mainStore.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄:&#123;&#123; mainStore.age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>piniaDemo中更大的数据:&#123;&#123; mainStore.maxNum &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleAge&quot;</span>&gt;</span>点击年龄添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过结构赋值来获取 store 中的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name, num, age, maxNum &#125; = mainStore;</span><br><span class="line"><span class="comment">//但这样通过结构赋值得到的数据不是响应式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为了解决以上问题，可以借助pinia内置的API来解决</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这样获得的数据就是响应式的数据</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, num, maxNum &#125; = <span class="title function_">storeToRefs</span>(mainStore);</span><br></pre></td></tr></table></figure><ul><li>getters 的使用和配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getters类似于组件中的computed计算属性</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">//写成函数的形式，且会收到state作为参数，通过如state.age这种形式可以访问到state中的数据</span></span><br><span class="line">    <span class="title function_">maxNum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>actions 的配置和使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在store文件夹下的index.js</span></span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">dataChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;牛马&quot;</span>;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span>++;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在组件中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//以这种形式调用即可</span></span><br><span class="line">   mainStore.<span class="title function_">dataChange</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 state 中的数据<ul><li>方法一:当修改单个属性数据时，直接修改即可</li><li>方法二:当需要批量修改数据时的<code>$patch()</code>的对象形式来修改</li><li>方法三:当需要批量修改数据时的<code>$patch()</code>的函数形式来修改</li><li>方法四：调用 actions 中的方法来修改(推荐使用这种)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 方式一:直接修改数据</span></span><br><span class="line">  <span class="comment">//mainStore.age++;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式二:通过$patch()来修改多个数据</span></span><br><span class="line">  <span class="comment">// mainStore.$patch(&#123;</span></span><br><span class="line">  <span class="comment">//     name: &#x27;牛马&#x27;,</span></span><br><span class="line">  <span class="comment">//     num: mainStore.num + 1</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式三:通过$patch的一个函数来修改</span></span><br><span class="line">  <span class="comment">// mainStore.$patch(state =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     mainStore.name = &#x27;牛马&#x27; + 1;</span></span><br><span class="line">  <span class="comment">//     mainStore.num++;</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式四:通过action来修改</span></span><br><span class="line">  mainStore.<span class="title function_">dataChange</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-基于-pinia-的简单案例"><a href="#4-基于-pinia-的简单案例" class="headerlink" title="4.基于 pinia 的简单案例"></a>4.基于 pinia 的简单案例</h2><h3 id="4-1-案例准备"><a href="#4-1-案例准备" class="headerlink" title="4.1 案例准备"></a>4.1 案例准备</h3><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><ul><li><p>商品列表</p><ul><li>展示商品列表</li><li>添加到购物车</li></ul></li><li><p>购物车</p><ul><li>展示购物车商品列表</li><li>展示总价格</li><li>订单结算</li><li>展示结算状态</li></ul></li></ul><h3 id="xxxxxxxxxx6-1-extend2-2-width-“400px-200px”-3-height-calc-100px-50rem-4-background-color-yellow-5-margin-0-auto-6-css"><a href="#xxxxxxxxxx6-1-extend2-2-width-“400px-200px”-3-height-calc-100px-50rem-4-background-color-yellow-5-margin-0-auto-6-css" class="headerlink" title="xxxxxxxxxx6 1.extend2 {2  width: “400px+200px”;3  height: calc(100px+50rem);4  background-color: yellow;5  margin: 0 auto;6}css"></a>xxxxxxxxxx6 1.extend2 {2  width: “400px+200px”;3  height: calc(100px+50rem);4  background-color: yellow;5  margin: 0 auto;6}css</h3><ul><li>App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Pinia - 购物车展示&lt;/h1&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h2&gt;商品列表&lt;/h2&gt;</span><br><span class="line">  &lt;ProductList&gt;&lt;/ProductList&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;ShoppingCart&gt;&lt;/ShoppingCart&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import ProductList from &quot;./components/ProductList.vue&quot;;</span><br><span class="line">import ShoppingCart from &quot;./components/ShoppingCart.vue&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>ProductList.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      商品名称 - 商品价格</span><br><span class="line">      &lt;button&gt;添加到购物车&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      商品名称 - 商品价格</span><br><span class="line">      &lt;button&gt;添加到购物车&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      商品名称 - 商品价格</span><br><span class="line">      &lt;button&gt;添加到购物车&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/2022/11/09/css/grid%E5%B8%83%E5%B1%80/"/>
      <url>/2022/11/09/css/grid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h1><ul><li><p><a href="http://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰</a></p></li><li><p>网格布局，又叫栅格布局，是一个基于网格(栅格)的二维布局 系统（横轴和纵轴）。</p></li><li><p>添加 grid 布局代码:<code>display:grid</code></p></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h3><ul><li>采用网格布局的区域叫做容器(container)</li><li>容器内部采用网格布局的叫做项目(item)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;catiter&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h3><ul><li>容器内的水平区域称为行，水平区域称为列</li><li>如下图所示:200 到 800 的颜色区域即列(column),400 到 600 的颜色区域即行(rows)</li><li>行和列的交叉区域叫做单元格(cell)</li><li>单元格的个数正常情况下为行数 x 列数</li><li>划分网格的线，称为”网格线”（grid line）。</li></ul><table border="1" width='300px' height='300px'>  <tr>    <td align='center'>100</td>    <td align='center' bgcolor=#FFB6C1>200</td>    <td align='center'>300</td>  </tr>  <tr>    <td align='center' bgcolor=#FFB6C1>400</td>    <td align='center' bgcolor=#FFB6C1>500</td>    <td align='center' bgcolor=#FFB6C1>600</td>  </tr>    <tr>    <td align='center'>700</td>    <td align='center' bgcolor=#FFB6C1>800</td>    <td align='center'>900</td>  </tr></table><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul><li><code>display:grid</code>给指定容器设置 grid 布局</li><li>通过<code>display:line-grid</code>可以设置容器元素为行内元素(默认是块级元素)<br>:::danger 注意<br>当容器设为网格布局时，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将效。<br>:::</li></ul><h3 id="行和列属性"><a href="#行和列属性" class="headerlink" title="行和列属性"></a>行和列属性</h3><ul><li><code>grid-template-columns</code>属性定义每一列的列宽，有几个列宽代表着有多少列</li><li><code>grid-template-rows</code>属性定义每一行的行高，有几个行高代表有几行</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代表创建一个3行3列的grid布局容器器列宽和行高都为100px，也可以使用百分比为单位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>repeat():用于简化重复的值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该代码等价于上方的代码,该函数要传入2个参数，一个是指定重复的次数，一个指定重复的数值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>auto-fill:用于根据容器的列或宽自动指定容器每行或每列的项目个数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">改代码表示根据容器宽度自动决定每行项目的个数，知道把一行填满才开始换行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>fr(fraction,意为片段):根据比例来分配空间，如果两列的宽度为 1fr 和 2fr，表示后者的宽度是前者的两倍。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>minmax():该函数会返回一个长度范围，它会接收两个参数，分别是最小值和最大值。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 行高 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">200px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 列宽：第一列 200px，第二列自动，第三列占最小10%，最大20% */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> auto <span class="built_in">minmax</span>(<span class="number">10%</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>auto:表示让浏览器自己决定长度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><ul><li>网格线命名：可以使用方括号来指定每一根网格线的名字，方便引用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">s&#125;</span><br></pre></td></tr></table></figure><ul><li>grid-row-gap 和 grid-column-gap<ul><li>第一个用来设置行间距</li><li>第二个用来设置列间距</li><li>grid-gap 是二者的合并简写形式</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上方代码等价于下面的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果两个值相等，则可以省略第二个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccs布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise学习笔记</title>
      <link href="/2022/11/06/Javascript/Promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/06/Javascript/Promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise-学习笔记"><a href="#Promise-学习笔记" class="headerlink" title="Promise 学习笔记"></a>Promise 学习笔记</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise 参考文档</a></p><h2 id="Promise-概念"><a href="#Promise-概念" class="headerlink" title="Promise 概念"></a>Promise 概念</h2><ul><li>promise 是一个用来存储数据的容器</li><li>它拥有着一套特殊的存储数据的方式</li><li>这个方式使得它里边可以保存异步调用的结果</li></ul><h2 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise"></a>为什么要用 Promise</h2><ul><li>当使用回调函数的形式来实现异步编程时，当处理结果过多时会出现回调地狱的现象。</li><li>Promise 就是为了解决回调地狱的问题，采用链式调用的形式，使得代码更具可读性。</li></ul><h2 id="创建-Promise"><a href="#创建-Promise" class="headerlink" title="创建 Promise"></a>创建 Promise</h2><ul><li>创建 Promise 时,构造函数中需要一个函数作为参数</li><li>Promise 构造函数的回调函数，它会在创建 Promise 时调用，调用时会有两个参数传递进去</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//resolve和reject是两个函数,通过两个函数可以向Promise中存储数据</span></span><br><span class="line">  <span class="comment">//resolve在执行正常时存储数据,reject在执行错误时存储数据</span></span><br><span class="line">  <span class="comment">//resolve(&quot;枫桥夜泊&quot;);</span></span><br><span class="line">  <span class="comment">//通过函数来向Promise中添加数据,好处就是可以用来添加异步调用的数据</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;枫桥夜泊&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="从-Promise-中读取数据"><a href="#从-Promise-中读取数据" class="headerlink" title="从 Promise 中读取数据"></a>从 Promise 中读取数据</h2><ul><li>可以通过 Promise 实例方法<code>then</code>来读取 Promise 中存储的数据</li><li><code>then</code>需要两个回调函数作为参数,回调函数用来获取 Promise 中的数据<ul><li>通过 resolve 存储的数据会调用第一个函数返回,可以在第一个函数编写处理数据的代码。</li><li>通过 reject 存储的数据或者出现异常时，会调用第二个函数返回数据，可以在第二个函数中编写处理异常的代码。</li></ul></li><li>也可以通过<code>catch</code>来读取数据<ul><li>catch 用法和 then 类似，但是只需要一个回调函数做为参数</li><li>catch 的回调函数只会在 Promise 被拒绝时被调用</li><li>catch 相当于 then(null,reason&#x3D;&gt;{})</li><li>catch 就是一个用来专门用来处理 Promise 异常的方法</li></ul></li><li><code>finally</code><ul><li>无论是正常存储数据还是出现异常了，finally 总会执行。</li><li>但是 finally 的回调函数不会接收到数据</li><li>通常用来编写一些无论成功与否都要执行的代码</li></ul></li><li>这三个方法都会返回一个 promise<ul><li>这个 Promise 对象中会存储回调函数的返回值</li><li>finally 的返回值，不会存储到新的 Promise 中</li><li>对 Promise 进行链式调用时，后边的方法(then 和 catch)读取的是上一步的执行结果<br>如果上一步的执行结果不是当前想要的结果则跳过当前的方法</li></ul></li><li>当 Promise 出现异常时，而整个调用链中没有 catch，则异常会向外抛出(catch 用来捕获异常)<ul><li>当 catch 内的代码出错，catch 自身不会处理自己的异常，而是向外抛出由后续的 catch 来处理</li></ul></li></ul><h2 id="Promise-原理"><a href="#Promise-原理" class="headerlink" title="Promise 原理"></a>Promise 原理</h2><h3 id="Promise-中维护了两个隐藏属性"><a href="#Promise-中维护了两个隐藏属性" class="headerlink" title="Promise 中维护了两个隐藏属性:"></a>Promise 中维护了两个隐藏属性:</h3><ul><li>PromiseResult:用来存储数据</li><li>PromiseState:用来记录 Promise 的状态(三种状态)<ul><li>fulfilled(完成) 通过 resolve 存储数据时</li><li>rejected(拒绝,出错了) 出错了,或者通过 rejec 存储数据时</li><li>pendding(正在进行中,数据还没存储进去)</li></ul></li><li>state 只能修改一次，修改以后永远不会在再变。</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li><p>当 Promise 被创建时，PromiseState 初始值为 pending</p></li><li><p>当通过 resolve 存储数据时，PromiseState 变为 fulfilled(完成)，PromiseResult 变为存储的数据值</p></li><li><p>当通过 reject 存储数据或出错时，PromiseState 变为 rejected，PromiseResult 变为存储的数据值或异常对象</p></li><li><p>当我们通过<code>then</code>读取函数时，相当于为 Promise 设置了回调函数，</p><ul><li>如果 PromiseState 变为 fulfilled，则调用 then 的第一个回调函数来返回数据。</li><li>如果 PromiseState 变为 rejected 则调用 then 的第二个回调函数来返回数据</li></ul></li></ul><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><ul><li>创建一个立即完成的 Promise</li></ul><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><ul><li><strong><code>Promise.reject()</code></strong> 方法返回一个带有拒绝原因的 <code>Promise</code> 对象。</li></ul><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><ul><li>需要传递一个数组作为参数</li><li>也会返回一个 Promise 对象，同时返回多个 Promise 执行的结果。</li><li>如果其中一个 Promise 对象报错，则全部的结果都不会返回</li><li>Promise.allSettled([…])同时返回多个 Promise 的执行结果(无论成功或失败)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Sum</span>(<span class="number">123</span>, <span class="number">456</span>), <span class="title class_">Sum</span>(<span class="number">5</span>, <span class="number">6</span>), <span class="title class_">Sum</span>(<span class="number">33</span>, <span class="number">44</span>)]).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><ul><li><p>同时执行多个 Promise，返回第一个执行完成的 Promise 的结果，其余的忽略。</p></li><li><p>谁运行的快的返回谁，不考虑对错</p></li><li><p>Promise.any() 返回执行最快的 Promise 所有的 promise 对象都执行失败才会返回失败状态。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1234</span>),</span><br><span class="line">  <span class="title class_">Sum</span>(<span class="number">123</span>, <span class="number">456</span>),</span><br><span class="line">  <span class="title class_">Sum</span>(<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">  <span class="title class_">Sum</span>(<span class="number">33</span>, <span class="number">44</span>),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印1234，因为它立即执行完成，其余的要等一秒</span></span><br></pre></td></tr></table></figure><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><ul><li>Js 是单线程的，它的运行时基于时间循环机制(event loop)<ul><li>调用栈:里面放的是要执行的代码(开始执行)</li><li>任务队列(队列是一种数据结构，先进先出):任务队列里面放的是将要执行的代码(准备执行了)。</li><li>当调用栈中的代码执行完毕后，队列中的代码才会按照顺序依次进入到栈中去执行。</li></ul></li><li>在 JS 中存在两种任务队列<ul><li>宏任务队列:大部分代码都去宏任务队列中去排队</li><li>微任务队列:Promise 的回调函数(then、catch、finally)去微任务队列</li></ul></li><li>JS 事件执行流程<ul><li>先执行调用栈中的队列</li><li>再执行微任务队列中的任务</li><li>最后执行宏任务队列中的任务</li></ul></li><li>通过 queueMicrotask 方法可以向微任务队列中添加一个任务</li></ul><h2 id="检测题"><a href="#检测题" class="headerlink" title="检测题"></a>检测题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果为 1 7 3 5 2 6 4</p></li><li><p>先执行调用栈里面的代码，按照顺序依次执行，所以先执行输出 1 和 7，并将 2 和 6 加入宏任务队列准备执行。</p></li><li><p>其次执行任务队列里面的任务按照微任务优先于宏任务的顺序所以先执行 3 个 Promise 对象的代码 按照顺序输出 3 和 5，并将 4 加入宏任务队列。</p></li><li><p>执行完微任务队列开始执行宏任务队列，按照进入宏任务队列的顺序 2&gt;6&gt;4,所以结果依次输出 2 6 4</p></li><li><p>所以最终结果为 1 7 3 5 2 6 4</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less</title>
      <link href="/2022/10/07/css/Less/"/>
      <url>/2022/10/07/css/Less/</url>
      
        <content type="html"><![CDATA[<h1 id="less-初见"><a href="#less-初见" class="headerlink" title="less 初见"></a>less 初见</h1><h2 id="less-的概念"><a href="#less-的概念" class="headerlink" title="less 的概念"></a>less 的概念</h2><p>less 是一种动态样式语言，属于 css 预处理器的范畴，它扩展了 css 语言，增添了变量、Mixin、函数等特性<br>使得 css 更加容易维护和拓展，less 即可以在客户端中运行，也可以借助 node.js 环境在服务器中运行.</p><p>:::tip 注意<br>less 可以借助工具将其转化为 css,推荐使用 vscode 中的 Easy-less 插件。<br>:::</p><p>(less 中文官网)[<a href="https://lesscss.com.cn/]">https://lesscss.com.cn/]</a></p><h1 id="less-中的混合"><a href="#less-中的混合" class="headerlink" title="less 中的混合"></a>less 中的混合</h1><h2 id="混合的概念"><a href="#混合的概念" class="headerlink" title="混合的概念"></a>混合的概念</h2><p>混合就是将一系列属性从一个规则集导入到另一个规则集的方式。</p><ul><li>普通混合（缺点：会被编译到 css 文件中）</li><li>不带输出的混合</li><li>带参数的混合（类似于函数）</li></ul><h2 id="带参数并且有默认值的混合（类似于给函数形参设置默认值）"><a href="#带参数并且有默认值的混合（类似于给函数形参设置默认值）" class="headerlink" title="带参数并且有默认值的混合（类似于给函数形参设置默认值）"></a>带参数并且有默认值的混合（类似于给函数形参设置默认值）</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hunhe</span>(<span class="variable">@color</span>:black,<span class="variable">@width</span>: <span class="number">600px</span><span class="comment">/*默认参数*/</span>) &#123;</span><br><span class="line">  <span class="comment">//带参数的混合</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带多个参数的混合"><a href="#带多个参数的混合" class="headerlink" title="带多个参数的混合"></a>带多个参数的混合</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hunhe</span>(<span class="variable">@color</span>:black,<span class="variable">@width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">//带参数的混合</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名参数-即给指定实参传参"><a href="#命名参数-即给指定实参传参" class="headerlink" title="命名参数(即给指定实参传参)"></a>命名参数(即给指定实参传参)</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hunhe</span>(<span class="variable">@color</span>:black,<span class="variable">@width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">//带参数的混合</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap3</span> &#123;</span><br><span class="line">  <span class="selector-class">.hunhe</span>(<span class="variable">@width</span>: <span class="number">400px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配模式（在多个相同的混合中-参数个数必须相同-，匹配特定的混合。）"><a href="#匹配模式（在多个相同的混合中-参数个数必须相同-，匹配特定的混合。）" class="headerlink" title="匹配模式（在多个相同的混合中(参数个数必须相同)，匹配特定的混合。）"></a>匹配模式（在多个相同的混合中(参数个数必须相同)，匹配特定的混合。）</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(dark, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(light, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">lighten</span>(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @_ 表示匹配所有</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@_</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@switch:</span> light;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@switch</span>, <span class="number">#888</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="arguments-变量（是个数组用来保存实参）"><a href="#arguments-变量（是个数组用来保存实参）" class="headerlink" title="arguments 变量（是个数组用来保存实参）"></a>arguments 变量（是个数组用来保存实参）</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*arguments变量*/</span></span><br><span class="line"><span class="selector-class">.borders</span>(<span class="variable">@w</span>,<span class="variable">@c</span>,<span class="variable">@y</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor1</span> &#123;</span><br><span class="line">  <span class="selector-class">.borders</span>(<span class="number">2px</span>,solid,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::danger 注意<br>注意由于 Eass-less 插件只有当文件再次保存时才会再次进行编译<br>所以当 demo.less 文件中的内容被修改而 test.less 文件未进行再次保存，则 test.css 的内容无法进行更新。<br>:::</p><h1 id="less-基础"><a href="#less-基础" class="headerlink" title="less 基础"></a>less 基础</h1><h2 id="less-中的注释"><a href="#less-中的注释" class="headerlink" title="less 中的注释"></a>less 中的注释</h2><p>less 中有两种注释格式</p><ul><li>单行注释:以&#x2F;&#x2F;为开头的注释，不会被编译到 css 文件中。</li><li>多行注释:以&#x2F;*为符号的注释方式，会被编译到 css 文件中</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个不会被编译到css文件中的单行注释。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这是一个会被编译到css文件中的多行注释*/</span></span><br></pre></td></tr></table></figure><h2 id="less-中的变量"><a href="#less-中的变量" class="headerlink" title="less 中的变量"></a>less 中的变量</h2><p>运用方式:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> pink; <span class="comment">//属性值作为变量。</span></span><br><span class="line"><span class="variable">@m:</span> margin; <span class="comment">//属性名作为变量。</span></span><br><span class="line"><span class="variable">@selector:</span> #wrap; <span class="comment">//选择器作为变量。</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;</span><br><span class="line">    @&#123;m&#125;:<span class="number">0</span> <span class="selector-tag">auto</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实际编译效果:</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::tip 注意</p><ul><li>当 less 中的变量保存的是属性值或是选择器时，调用变量时的格式应为:@{变量名}</li><li>作为 URL:@{url}</li><li>变量具有延迟加载即:将作用域中代码解析完后再来调用变量赋值。<br>:::</li></ul><h2 id="less-中的嵌套规则"><a href="#less-中的嵌套规则" class="headerlink" title="less 中的嵌套规则"></a>less 中的嵌套规则</h2><ul><li>less 中的嵌套结构与 HTML 中盒子模型的嵌套结构相对应,如下所示。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable">@&#123;selector&#125;</span>&#123;</span><br><span class="line">    @&#123;m&#125;:<span class="number">0</span> <span class="selector-tag">auto</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1.5s</span>;</span><br><span class="line">    <span class="selector-class">.wrap2</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: yellow;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&amp;符号在嵌套中的使用<br>在选择器前加&amp;表示与父级选择则器同一等级。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">编译后的效果为:</span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="less-的计算"><a href="#less-的计算" class="headerlink" title="less 的计算"></a>less 的计算</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>计算结果的单位以最左侧数据的单位为准</li><li>注意，计算除法时要添加括号，如果不加则无法生效</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>+<span class="number">100</span>+<span class="number">200px</span>; <span class="comment">//加法</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>-<span class="number">200</span>-<span class="number">50rem</span>; <span class="comment">//减法</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">50</span> * <span class="number">2</span> * <span class="number">3px</span>; <span class="comment">//乘法</span></span><br><span class="line">  <span class="attribute">margin-right</span>: (<span class="number">300</span>/<span class="number">2</span>) px; <span class="comment">//除法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">150</span> px; //如果less不加括号则该处无法生效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继承（Extend）"><a href="#继承（Extend）" class="headerlink" title="继承（Extend）"></a>继承（Extend）</h1><h2 id="继承的优点"><a href="#继承的优点" class="headerlink" title="继承的优点"></a>继承的优点</h2><ul><li>less 中继承可以多个选择器应用同一组属性，最终编译为并集选择器。</li><li>其性能比混合高，但灵活性比混合低。</li></ul><h2 id="两种继承"><a href="#两种继承" class="headerlink" title="两种继承"></a>两种继承</h2><h3 id="Extend-Syntax（不加-all）"><a href="#Extend-Syntax（不加-all）" class="headerlink" title="Extend Syntax（不加 all）"></a>Extend Syntax（不加 all）</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.5s</span>;</span><br><span class="line">  <span class="selector-class">.wrap2</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.extend2); <span class="comment">//继承extend2中的属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span>,</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.wrap2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Extend-“all”"><a href="#Extend-“all”" class="headerlink" title="Extend “all”"></a>Extend “all”</h3><p>如果在继承加上 all 则表示在继承时，与继承的选择器相关的所有属性都将被继承。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.extend2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.5s</span>;</span><br><span class="line">  <span class="selector-class">.wrap2</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.extend2 all); <span class="comment">//加上了all，extend2的hover属性才会被继承</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span>,</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.wrap2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.extend2</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.wrap2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>可理解为把 all 前的选择器出现的地方全都替换为 extend 前的选择器</li><li>即把 .test 替换为 .replacement 生成一个新的选择器应用样式，且不破坏原有的选择器</li></ul></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.test</span>,</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.replacement</span>:<span class="selector-tag">extend</span>(.test all) &#123;</span><br><span class="line">  <span class="comment">//继承的另一种写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.test</span>,</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-class">.c</span>,</span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.replacement</span>,</span><br><span class="line"><span class="selector-class">.replacement</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.replacement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h2><ul><li>通过给内容添加单引号或双引号来避免内容被 less 编译而是直接输出到 css 文件中</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">&quot;400px+200px&quot;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100px</span>+<span class="number">50rem</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.extend2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">&quot;400px+200px&quot;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100px</span>+<span class="number">50rem</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2022/10/03/Javascript/JS%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/03/Javascript/JS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="类的简介"><a href="#类的简介" class="headerlink" title="类的简介"></a>类的简介</h1><h2 id="使用-object-创建对象"><a href="#使用-object-创建对象" class="headerlink" title="使用 object 创建对象"></a>使用 object 创建对象</h2><ul><li>无法区分出不同类型的对象</li><li>不方便批量创建对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运用-class-创建对象"><a href="#运用-class-创建对象" class="headerlink" title="运用 class 创建对象"></a>运用 class 创建对象</h2><ul><li>类的概念:类是对象的模板，可以将对象的属性和方法直接定义在类中<br>定义后就可以直接通过类来创建对象。</li><li>通过一个类创建的对象称为同类对象。可以使用 instanceof 来检查一个对象是否由某个类所创建。<br>如果一个对象由某个类所创建，那么就将该对象称为该类的一个实例。</li></ul><p>语法:<br>1.class 类名{}，类名要使用大驼峰命名。<br>2.const 类名&#x3D;class{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">class</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h1 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h1><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ul><li>直接写的属性叫做实例属性，实例属性只能通过实例访问</li><li>类的代码块自带严格模式，且类的代码块是用来设置对象的属性<br>不是什么代码都能写。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;张三&quot;</span>; <span class="comment">//直接写的属性叫做实例属性，实例属性只能通过实例访问</span></span><br><span class="line">  age = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><ul><li>使用 static 声明的属性叫做静态属性（类属性），只能通过类去访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> name;</span><br><span class="line">  <span class="keyword">static</span> age; <span class="comment">//使用static声明的属性叫做静态属性（类属性），只能通过类区访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h1><h2 id="添加方法的方式"><a href="#添加方法的方式" class="headerlink" title="添加方法的方式"></a>添加方法的方式</h2><p>方法分为两种:<br><br> 1.实例方法:实例中的 this 指向的是当前的实例<br><br>2.静态方法(类方法):通过类来调用，this 指向的是当前类，谁调用指向谁。</p><ul><li>第一种</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  sayhello = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  <span class="title function_">sayhello</span>(<span class="params"></span>) &#123;&#125; <span class="comment">//实例方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;&#125; <span class="comment">//静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>概念:在类中可以添加一个特殊的方法 constructor,该方法被称为构造函数</p><p>:::tip<br>该函数会在我们调用类创建对象时，自动被调用执行<br>:::</p><ul><li>可以在构造函数中为实例属性赋值</li><li>在构造函数中 this 指向当前所创建的对象</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><p>面向对象的特点:封装、继承、多态。</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>对象就是一个用来存储不同属性的容器</li><li>对象不仅要存储属性，还要负责数据的安全</li><li>直接添加到对象中的属性并不安全，因为它可以被任意修改</li><li>确保数据安全:<br>1.私有化数据:实例属性中以#开头的属性代表私有属性，私有属性只能在类的内部访问。<br><br>2.提供了 getter 和 setter 方法来开放对数据的操作，这样做带来好处有可以控制属性的读写权限<br>可以在方法中对属性的值进行验证</li></ul><ul><li>封装主要用来保障数据的安全</li><li>实现封装的方式:<br>1.属性私有化，在属性名前加#<br>2.通过 getter 和 setter 方法来操作属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  #age;</span><br><span class="line">  #name;</span><br><span class="line">  #sex; <span class="comment">//私有属性</span></span><br><span class="line">  <span class="comment">/* getAge() &#123;</span></span><br><span class="line"><span class="comment">          return this.#age;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        setAge(age) &#123;</span></span><br><span class="line"><span class="comment">          this.#age = age;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setter方法被调用了&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>();</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">15</span>; <span class="comment">//属性的读取和设置与以往一致。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>:::tip 注意<br>在 JS 中，不会检查参数的类型，这意味着任何数据都可以作为参数传递。<br>:::</p><p>多态在 JS 中的体现为:函数参数类型的多态性，要调用某个函数无需指定类型，只要条件满足即可，多态让我们的代码编写更加灵活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> d1 = <span class="keyword">new</span> <span class="title function_">dog</span>(<span class="string">&quot;哈士奇&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayhello</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好<span class="subst">$&#123;obj.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayhello</span>(p1); <span class="comment">//传入p1对象体现了多态。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1, d1);</span><br></pre></td></tr></table></figure><h2 id="原型与原型对象"><a href="#原型与原型对象" class="headerlink" title="原型与原型对象"></a>原型与原型对象</h2><ul><li>个人理解:<br>1.原型:任意一个对象或者类它都有它的缔造者或是类似于父类的存在如一个对象是由一个类 new 出来的这个类就是它<br>所创建的实例的原型<br>2.原型对象:任意一个类通过构造函数可以创建出无数个对象，但当一个类被创建时，浏览器开辟一个空间为其创建一个特殊的对象，<br>这个对象有且只有一个，通过这个类所创建的每个实例对象都能访问到这个对象，这个对象就叫做这些实例的原型对象，类的实例<br>通过__proto__属性能够访问到原型对象，而创建它们的类通过 prototype 能访问到这个原型对象。除此之外，一个类的原型对象<br>是这个类的父类的一个实例对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  age = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//结果为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span>); <span class="comment">//通过p1实例对象访问这个原型对象，而这个对象是父类Animal的一个实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">//结果为true说明p1的原型对象是父类Animal的一个实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Person是一个类,它存在一个原型对象，通过类的prototype属性和Person类实例对象的__proto__属性能够访问到这个原型对象</span></span><br><span class="line"><span class="comment">  ，且都是同一个，所以p1.__proto__ === Person.prototype的结果为true。而由于Person它的父类是Animal所以说Person类</span></span><br><span class="line"><span class="comment">  的实例的原型对象是Animal类的一个实例对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h2><ul><li><p>概念:new 运算符是创建对象时调用要使用的运算符</p></li><li><p>当使用 new 去调用一个函数时会发生以下过程:</p><p>1.创建一个普通的 js 对象 2.将新创建的实例对象的__proto__属性的指向设置为指向类或者是构造函数的属性 prototype 指向的原型对象 3.使用实参来调用构造函数，并且将函数中的 this 指向改为指向实例对象。</p></li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">参考文档</a></p></blockquote><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><pre><code>1.能访问到外部作用域中变量的函数2.什么时候使用:当我们需要隐藏一些不希望被人访问的内容时可以使用闭包。3.闭包的构成条件:    (1).函数的嵌套    (2).内部函数要引用外部函数中的变量    (3).内部函数要作为返回值返回</code></pre><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;全局变量a&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&quot;局部变量a&quot;</span>;</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">//输出全局变量a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出局部变量a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure><ul><li>函数作用域在函数创建时就已经确定了(词法作用域)和函数被调用的位置无关，所以在以上代码实例中 fn 函数输出的是全局变量 a，而不是局部变量 a。</li></ul><h2 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h2><p>1.闭包在外部函数被调用时产生，外部函数每次被调用都会产生一个全新的闭包<br>2.在内部函数失去时销毁(内部函数被垃圾回收了，闭包才会消失)</p><p>:::tip 注意<br>注意事项:<br> 1.闭包主要用来隐藏一些不被外部访问的内容，这就意味着闭包需要消耗一定的内存空间。<br> 2.相较于类来说，闭包比较浪费内存空间(类可以使用原型而闭包不能)<br>需要执行次数较少时用闭包，需要大量创建实例时，使用类</p><p>:::</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">参考文档</a></p></blockquote><blockquote><p><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html">菜鸟文档</a></p></blockquote><h2 id="概念和作用"><a href="#概念和作用" class="headerlink" title="概念和作用"></a>概念和作用</h2><pre><code>概念:正则表达式是用于匹配字符串中字符组合的模式。作用:正则表达式用来定义一个规则    通过这个规则计算机可以检查一个字符串是否符合规则，或者将符合规则的内容提取出来。注意:正则表达式也是JS中的一个对象，所以要使用正则表达式，需要先创建正则表达式的对象。</code></pre><h2 id="创建正则表达式的两种方式"><a href="#创建正则表达式的两种方式" class="headerlink" title="创建正则表达式的两种方式"></a>创建正则表达式的两种方式</h2><p>1.通过构造函数来创建正则表达式的对象<br> 该构造函数可以传入两个参数:1.正则表达式,2.匹配模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>();</span><br><span class="line"><span class="comment">//通过这种方式创建正则表达式时，它的转义符号时//</span></span><br></pre></td></tr></table></figure><p>2.使用字面量创建正则表达式:&#x2F;正则&#x2F;匹配模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/\w/i</span>;</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test2 = <span class="regexp">/a/</span>; <span class="comment">//检查字符串中是否有a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test2.<span class="title function_">test</span>(<span class="string">&quot;abcd&quot;</span>)); <span class="comment">//输出true</span></span><br><span class="line"><span class="comment">// |在正则表达式中表示或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test2 = <span class="regexp">/a|b/</span>; <span class="comment">//检查字符串中是否有或者b有两者中的一个就行</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test2.<span class="title function_">test</span>(<span class="string">&quot;bcd&quot;</span>)); <span class="comment">//输出true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[]表示或(字符集)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test3 = <span class="regexp">/[abcdefg]/</span>; <span class="comment">//只要检索的字符串中有方括号中任意一个字符即可返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test3.<span class="title function_">test</span>(<span class="string">&quot;f&quot;</span>)); <span class="comment">//输出true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[a-b] 表示查找字符串中是否含有指定范围内的数</span></span><br></pre></td></tr></table></figure><h1 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h1><ul><li>相同点:二者都能调用函数且指定 this 的指向</li><li>不同点:就是 <code>call()</code> 方法接受的是<strong>一个参数列表</strong>，而 <code>apply()</code> 方法接受的是<strong>一个包含多个参数的数组</strong>。</li><li><code>call(this指向参数,实参1,实参2,实参3)</code></li><li><code>apply(this指向参数,[实参数组])</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a是<span class="subst">$&#123;a&#125;</span>,b是<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>, fn &#125;;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//this指向的是window</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj); <span class="comment">//this指向的是对象obj</span></span><br><span class="line">fn2.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">fn2.<span class="title function_">apply</span>(obj, [<span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><ul><li><strong><code>bind()</code></strong> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li><li>新函数的 this 绑定后,不管函数以何种方式调用,this 的指向都不会改变</li><li>bind 函数调用时除了第一个 this 指向的参数,其余参数会作为新函数的参数且无法更改</li></ul><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><a href="https://www.runoob.com/json/json-tutorial.html">JSON 教程 </a></p><h3 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h3><ul><li><p>JS 中的对象使用时都是存储于计算机内存中</p></li><li><p>序列化指将一个对象转化为可以存储的格式</p><p>​ 在 JS 中的对象序列化通常是指将一个对象转化为字符串(JSON 字符串)</p></li><li><p>序列化的用途</p><ul><li>对象序转化为字符串后,可以在不同类型中的语言中传递</li><li>甚至人可以直接对字符串进行读写操作</li></ul></li><li><p>如何进行序列化</p><ul><li>在 JS 中存在一个工具类 JSON(JavaScript Object Notation) JSON 对象表示法</li><li>JS 对象序列化后会转化为一个字符串,这个字符串称之为 JSON 字符串</li></ul></li><li><p>也可以手动编写 JSON 字符串,很多程序的配置文件就是用 JSON 编写的</p></li><li><p>编写 JSON 的注意事项</p><ul><li>JSON 字符串有两种类型<ul><li>JSON 对象{}</li><li>JSON 数组[]</li></ul></li><li>JSON 字符串中的对象的属性名必需使用双引号引起来</li><li>JSON 中可以使用的数据类型<ul><li>数字(Number)</li><li>字符串(String):必需用双引号</li><li>布尔值(Boolean)</li><li>空值(Null)</li><li>对象(Object)</li><li>数组(Array)</li></ul></li><li>JSON 的格式和 JS 对象的格式基本一致<ul><li>JSON 中如果最后一个属性的后面不要再加括号</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Es6</title>
      <link href="/2022/10/03/Javascript/Es6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/10/03/Javascript/Es6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6-模块化"><a href="#Es6-模块化" class="headerlink" title="Es6 模块化"></a>Es6 模块化</h1><h2 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h2><ul><li>将实现某一功能的 js 代码抽离出来构成一个单独的 js 文件,当需要这一功能时，再将该 js 文件引入，该 js 文件能被称为一个模块。</li><li>一个模块就是一个独立的文件</li></ul><h2 id="模块化的优势"><a href="#模块化的优势" class="headerlink" title="模块化的优势"></a>模块化的优势</h2><ul><li>防止命名冲突</li><li>实现代码的复用</li><li>提高代码的可维护性</li><li>每个模块只会加载一次，若再去加载同目录下同文件，直接从内存中读取。</li></ul><h2 id="模块化语法"><a href="#模块化语法" class="headerlink" title="模块化语法"></a>模块化语法</h2><p>即如何将模块暴露出去供人使用(export),如何引入已经写好的模块来使用(import)</p><h3 id="暴露方式-export"><a href="#暴露方式-export" class="headerlink" title="暴露方式(export)"></a>暴露方式(export)</h3><ul><li>分别暴露:即在模块中，将所有的变量和函数都去调用 export 命令将它们一一暴露</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hanshu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;分别暴露&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>统一暴露:在模块中将所有的变量或函数整合成一个对象，最后将这个对象暴露出去。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printf</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; msg, printf &#125;;</span><br></pre></td></tr></table></figure><ul><li>默认暴露:暴露一个对象，将想要暴露的内容直接写在对象中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">print</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xinxi</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;未知&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="引入方式-import"><a href="#引入方式-import" class="headerlink" title="引入方式(import)"></a>引入方式(import)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//注意type的类型为module</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//分别暴露</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; hanshu &#125; <span class="keyword">from</span> <span class="string">&quot;./module/分别暴露.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">hanshu</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//统一暴露</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; printf, msg &#125; <span class="keyword">from</span> <span class="string">&quot;./module/统一暴露.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">printf</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//默认暴露</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> zs <span class="keyword">from</span> <span class="string">&quot;./module/默认暴露.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  zs.<span class="title function_">print</span>(zs.<span class="property">xinxi</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="as-的用法"><a href="#as-的用法" class="headerlink" title="as 的用法"></a>as 的用法</h3><ul><li><p>在 Es6 模块化中，as 用于引入或暴露模块时，对模块中的变量或方法等进行重命名，从而实现将模块中的变量隐藏起来防止被修改</p></li><li><p>暴露时使用 as 重命名</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printf</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; msg, printf <span class="keyword">as</span> conlog &#125;; <span class="comment">//暴露时将printf函数重命名为conlog</span></span><br></pre></td></tr></table></figure><ul><li>引入时使用 as 重命名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将引入的msg变量用as重命名为nsg</span></span><br><span class="line"><span class="keyword">import</span> &#123; msg <span class="keyword">as</span> nsg &#125; <span class="keyword">from</span> <span class="string">&quot;./module/统一暴露.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将所有模块中暴露的内容整合成一个对象并用as对其进行重命名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ty <span class="keyword">from</span> <span class="string">&quot;模块地址&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="import-命令特点"><a href="#import-命令特点" class="headerlink" title="import 命令特点"></a>import 命令特点</h3><ul><li>import 命令会提升到整个模块的头部，首先执行。</li><li>多次重复执行同一句 import 语句，那么只会执行第一次,执行完第一次后会将其暂存起来，下次在执行同样的 import 命令,会去读取内存而不是再次引入。</li></ul><h3 id="export-default-的特点"><a href="#export-default-的特点" class="headerlink" title="export default 的特点"></a>export default 的特点</h3><ul><li><p>在一个文件或模块中，export default 命令只能使用一次。(多个默认值显然不合理)</p></li><li><p>引入其它暴露方式的模块时，需要在引入时将想要引入的变量用{}括起来(Es6 解构赋值),而 export default 不需要。</p></li><li><p>使用 export default 暴露的内容在引入时，可以使用任意的变量来接收</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zs <span class="keyword">from</span> <span class="string">&quot;./module/默认暴露.js&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
